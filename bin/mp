#!/usr/bin/env python
""" Launchpad Merge Proposal helper

    Run with Launchpad.net MP url and this will spawn a shell with the working directory
    being the checked out code with the uncommitted merged code. You can then run diff
    commands or tests as needed. When you exit the shell you will be prompted to merge
    and for commit message as needed.

    Assumptions:
    - You have bzr/git installed and your user is setup with launchpad credentials.

    Resources:
    - https://help.launchpad.net/API/launchpadlib
    - https://launchpad.net/+apidoc/1.0.html
"""
from contextlib import contextmanager
import os
import shutil
import sys
import subprocess
import tempfile
import urlparse

from launchpadlib.launchpad import Launchpad

BRANCH_CACHE = os.path.expanduser('~/.launchpad_cache')
LP_MP_STATUSES = ['Work in progress', 'Approved', 'Needs review', 'Rejected', 'Merged', 'Code failed to merge',
                  'Queued', 'Superseded']
SHELL = '/bin/bash'


class Branch(object):
    def __init__(self, branch_url, local_dir=None):
        self.url = branch_url
        self.local_dir = local_dir

        if self.local_dir is not None:
            # Make sure the parent directory of the local_dir exists
            pdir = os.path.join(BRANCH_CACHE, os.path.dirname(self.local_dir))
            if not os.path.exists(pdir):
                os.makedirs(pdir)

    def local_duplicate(self, target_dir):
        """ Make a local copy of the branch
        :param target_dir: The directory for the local copy
        :return: A Branch object
        """
        raise NotImplementedError

    def local_merge(self, other):
        """ Merge the other branch into this one.
        :param other: Another branch of the same type.
        :return: True on success, False on failure including conflicts
        """
        raise NotImplementedError

    def commit_and_push(self, comment_path):
        """ Commit and push the changes in the local repository.
        :param comment_path: The path of the file with the commit message.
        :return: bool for success
        """
        raise NotImplementedError

    def update_local(self):
        """ update the local_dir from the remote url
        :return: bool for success
        """
        raise NotImplementedError


class BzrBranch(Branch):
    def local_duplicate(self, target_dir):
        """ Make a local copy of the branch
        :param target_dir: The directory for the local copy
        :return: A Branch object
        """
        if self.local_dir is None:
            return None

        subprocess.check_call(['bzr', 'branch', self.local_dir, target_dir])

        return BzrBranch(self.url, target_dir)

    def local_merge(self, other):
        """ Merge the other branch into this one.
        :param other: Another branch of the same type.
        :return: True on success, False on failure including conflicts
        """
        if self.local_dir is None:
            return None

        # bzr merge will fail with conflicts, but I don't want to bail so use call not check_call
        returncode = subprocess.call(['bzr', 'merge', other.url], cwd=self.local_dir)

        if returncode != 0:
            return False

        return True

    def commit_and_push(self, comment_path):
        """ Commit and push the changes in the local repository.
        :param comment_path: The path of the file with the commit message.
        :return: bool for success
        """
        if self.local_dir is None:
            return None

        subprocess.check_call(['bzr', 'ci', '-F', comment_path], cwd=self.local_dir)
        subprocess.check_call(['bzr', 'push', self.url], cwd=self.local_dir)

    def update_local(self):
        """ update the local_dir from the remote url
        :return: bool for success
        """
        if self.local_dir is None:
            return False

        if os.path.exists(self.local_dir):
            subprocess.call(['bzr', 'pull'], cwd=self.local_dir)
        else:
            subprocess.check_call(['bzr', 'branch', self.url, self.local_dir])

        return True


class GitBranch(Branch):
    def __init__(self, repo_url, repo_ref, local_dir=None):
        Branch.__init__(self, repo_url, local_dir)

        # I'm assuming refs/head/ here this is probably mostly right but if different the full ref could fail later
        if repo_ref.find('refs/heads/') != -1:
            self.branch = repo_ref[11:]
        else:
            self.branch = repo_ref

    def local_duplicate(self, target_dir):
        """ Make a local copy of the branch
        :param target_dir: The directory for the local copy
        :return: A Branch object
        """
        if self.local_dir is None:
            return None

        subprocess.check_call(['cp', '-r', self.local_dir, target_dir])

        return GitBranch(self.url, self.branch, target_dir)

    def local_merge(self, other):
        """ Merge the other branch into this one.
        :param other: Another branch of the same type.
        :return: True on success, False on failure including conflicts
        """
        if self.local_dir is None:
            return None

        # Pull in the other branch locally
        subprocess.check_call(['git', 'remote', 'add', 'other', other.url], cwd=self.local_dir)
        subprocess.check_call(['git', 'fetch', 'other'], cwd=self.local_dir)

        # A failed merge may result in a failure but still work showing the user so use call not check_call
        returncode = subprocess.call(['git', 'merge', '--no-commit', '--no-ff', 'other/' + other.branch],
                                     cwd=self.local_dir)

        if returncode != 0:
            return False

    def commit_and_push(self, comment_path):
        """ Commit and push the changes in the local repository.
        :param comment_path: The path of the file with the commit message.
        :return: bool for success
        """
        if self.local_dir is None:
            return None

        subprocess.check_call(['git', 'commit', '-F', comment_path], cwd=self.local_dir)
        subprocess.check_call(['git', 'push', self.url, self.branch], cwd=self.local_dir)

    def update_local(self):
        """ update the local_dir from the remote url
        :return: bool for success
        """
        if self.local_dir is None:
            return None

        if os.path.exists(self.local_dir):
            subprocess.call(['git', 'fetch'], cwd=self.local_dir)
        else:
            subprocess.check_call(['git', 'clone', self.url, self.local_dir])

        subprocess.call(['git', 'checkout', self.branch], cwd=self.local_dir)

        return True


def main(argv=None):
    if argv is None:
        argv = sys.argv
    if len(argv) != 2:
        print('Usage: {} <Merge Proposal url>'.format(argv[0]))
        return 1

    # Auth launchpad
    launchpad = Launchpad.login_with('mp', 'production')

    # Pull the project details from the api and find the mp, I need to start with a project or branch not the mp
    project = launchpad.projects[project_from_url(argv[1])]
    mp = None
    for tmp_mp in project.getMergeProposals(status=LP_MP_STATUSES):
        if tmp_mp.web_link == argv[1]:
            mp = tmp_mp
            break

    if mp is None:
        print('Error finding the merge proposal via the API')
        sys.exit(3)

    if mp.target_branch is None:  # A git target
        target_repo = mp.target_git_repository
        target_branch = GitBranch(target_repo.git_ssh_url, mp.target_git_path,
                                  os.path.join(BRANCH_CACHE, target_repo.git_identity))
        source_branch = GitBranch(mp.source_git_repository.git_ssh_url, mp.source_git_path)
    else:
        target_identity = mp.target_branch.bzr_identity
        target_branch = BzrBranch(target_identity, os.path.join(BRANCH_CACHE, target_identity))
        source_branch = BzrBranch(mp.source_branch.bzr_identity)

    target_branch.update_local()
    # Branch/merge to a tempdir
    with tempdir() as base_dir:
        tmp_branch = target_branch.local_duplicate(base_dir)

        tmp_branch.local_merge(source_branch)

        # Drop to a shell
        print('The uncommitted merged code is available here, run tests, view diffs, etc as needed.')
        print('When the shell is exited you will be prompted regarding merging')
        subprocess.call([SHELL], cwd=base_dir)

        # Merge or not
        if raw_input('Would you like to merge? [y/n] ') == 'y':
            # Have the user write the merge comment
            comment_str = '[{}, r={}] {}'.format(mp.registrant_link.split('~')[-1],
                                                 launchpad.me.name, mp.description)
            comment_path = comment_file(base_dir, comment_str)

            # Approve in the MP
            mp.createComment(subject='Re: [Merge] {} into {}'.format(source_branch.url, target_branch.url),
                             vote='Approve')

            # Merge and push
            tmp_branch.commit_and_push(comment_path)
        else:
            if raw_input("Would you like to do a 'Needs Fixing' comment on the MP? [y/n] ") == 'y':
                comment_path = comment_file(base_dir, '# Write your comment here (remove this line)')
                with open(comment_path, 'r') as comment:
                    comment = comment.read()

                mp.createComment(subject='Re: [Merge] {} into {}'.format(source_branch.url, target_branch.url),
                                 content=comment, vote='Needs Fixing')


def comment_file(cdir, contents):
    """ Create a temporary comment file in dir with prepopulate contents, then allow the user
        to edit it.
        Return the path the final file
    """
    cfile, comment_path = tempfile.mkstemp(dir=cdir)
    os.write(cfile, contents)
    editor = os.environ.get('EDITOR', 'vi')
    # check_call because if the user aborts here, it should stop the merge/push/comment
    subprocess.check_call([editor, comment_path])
    return comment_path


def project_from_url(mp_url):
    """ Parse a merge proposal url and return the project name"""
    parts = urlparse.urlsplit(mp_url)
    if not parts.netloc.startswith('code.launchpad.net'):
        print('Error parsing url, should be of the form'
              'https://code.launchpad.net/~<author.name>/<project.name>/<branch.name>/+merge/<id>')
        sys.exit(2)

    branch_name, merge_id = parts.path.split('+merge', 1)

    return branch_name.rstrip('/').lstrip('/').split('/')[1]


@contextmanager
def tempdir():
    """ A simple temp directory context manager. """
    tdir = tempfile.mkdtemp()
    base_dir = os.path.join(tdir, 'mp')
    try:
        yield base_dir
    finally:
        shutil.rmtree(tdir)


if __name__ == "__main__":
    sys.exit(main())
